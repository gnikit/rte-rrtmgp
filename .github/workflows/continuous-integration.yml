name: Continuous Integration
on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches-ignore:
    - documentation
  workflow_dispatch:


jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        fpmodel: [DP, SP]
        toolchain:
          - {compiler: gcc, version: 10}
          - {compiler: gcc, version: 11}
          - {compiler: gcc, version: 12}
        include:
          - os: ubuntu-latest
            shell: bash -leo pipefail {0}
            use-cache: true
          - os: windows-latest
            shell: "msys2 -leo pipefail {0}"
            use-cache: false

    defaults:
      run:
        shell: ${{ matrix.shell }}

    env:
      # Core variables:
      FCFLAGS: "-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -fmodule-private -fimplicit-none -finit-real=nan -g -DRTE_USE_CBOOL -DRTE_USE_${{ matrix.fpmodel }}"
      # Make variables:
      RRTMGP_ROOT: ${{ github.workspace }}
      RRTMGP_DATA: ${{ github.workspace }}/rrtmgp-data
      RUN_CMD:
      FAILURE_THRESHOLD: 7.e-4
    steps:

    - if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        path-type: inherit
        install: >-
          mingw-w64-x86_64-netcdf-fortran

    #
    # Relax failure thresholds for single precision
    #
    - name: Relax failure threshold for single precision
      if: matrix.fpmodel == 'SP'
      run: echo "FAILURE_THRESHOLD=3.5e-1" >> $GITHUB_ENV
    #
    # Check out repository under $GITHUB_WORKSPACE
    #
    - name: Check out code
      uses: actions/checkout@v4
    #
    # Check out data
    #
    - name: Check out data
      uses: actions/checkout@v4
      with:
        repository: earth-system-radiation/rrtmgp-data
        path: rrtmgp-data
        ref: v1.8.1
    
    # Setup Fortran compiler
    - uses: fortran-lang/setup-fortran@v1.6.1
      id: setup-fortran
      with:
        compiler: ${{ matrix.toolchain.compiler }}
        version: ${{ matrix.toolchain.version }}
    #
    # Cache Conda packages
    #
    - name: Cache Conda packages
      uses: actions/cache@v4
      with:
        path: ~/conda_pkgs_dir
        key: conda-pkgs
    #
    # Set up Conda
    #
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        environment-file: environment-ci.yml
        activate-environment: rte_rrtmgp_ci
        auto-activate-base: false
        # Use the cache properly:
        use-only-tar-bz2: ${{ matrix.use-cache }}
    #
    # Build libraries, examples and tests
    #
    - name: Build libraries
      run: |
        $FC --version
        make -j4 libs
    #
    # Run examples and tests
    #
    - name: Build and run examples and tests
      if: runner.os == 'Linux'
      run: |
        export FCINCLUDE="-I ${CONDA_PREFIX}/include"
        export LDFLAGS="-L ${CONDA_PREFIX}/lib"
        export LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}
        make -j4 tests

    - name: Build and run examples - ${{ runner.os }}
      if: runner.os == 'Windows'
      run: |
        ROOT="/c/msys64/mingw64"
        export FCINCLUDE="-I ${ROOT}/include"
        export LDFLAGS="-L ${ROOT}/lib"
        export LD_LIBRARY_PATH=${ROOT}/lib:${LD_LIBRARY_PATH}
        make -j4 tests
    #
    # Compare the results
    #
    - name: Compare the results
      run: make -j4 check
